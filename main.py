# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wc9VlbFUkzmRd4r3NDBDiEhd6-aDbHxi
"""

import pandas as pd
import tkinter as tk
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score

data = pd.read_csv('modified_project_dataset.csv')

print(data.info())

print(data.head())

print(data.describe())

print(data.isnull())

data.drop_duplicates(inplace=True)

import tkinter as tk
from tkinter import messagebox

# Define a placeholder calculate_profit function
def calculate_profit():
    messagebox.showinfo("Profit", "Placeholder: Profit calculation logic goes here")

# Define a placeholder calculate_loss function
def calculate_loss():
    messagebox.showinfo("Loss", "Placeholder: Loss calculation logic goes here")

# Define a placeholder show_rating function
def show_rating():
    messagebox.showinfo("Rating", "Placeholder: Rating display logic goes here")

# Define a placeholder show_customer_emails function
def show_customer_emails():
    messagebox.showinfo("Customer Emails", "Placeholder: Customer email display logic goes here")

# Create a function to handle the logout button click
def logout():
    main_win.destroy()  # Close the main window

# Create a function to display the main window
def main_window():
    # Create the main window
    global main_win
    main_win = tk.Tk()
    main_win.title("Restaurant Owner Dashboard")

    # Create buttons for Profit, Loss, Rating, and Customers' Email
    profit_button = tk.Button(main_win, text="Profit", command=calculate_profit, padx=50, pady=10, bg="green", fg="white", font=("Arial", 12, "bold"))
    loss_button = tk.Button(main_win, text="Loss", command=calculate_loss, padx=20, pady=10, bg="red", fg="white", font=("Arial", 12, "bold"))
    rating_button = tk.Button(main_win, text="Rating", command=show_rating, padx=20, pady=10, bg="blue", fg="white", font=("Arial", 12, "bold"))
    email_button = tk.Button(main_win, text="Customers' Email", command=show_customer_emails, padx=20, pady=10, bg="orange", fg="white", font=("Arial", 12, "bold"))
    logout_button = tk.Button(main_win, text="Logout", command=logout, padx=20, pady=10, bg="gray", fg="white", font=("Arial", 12, "bold"))

    # Arrange buttons in a grid layout
    profit_button.grid(row=0, column=0, padx=10, pady=10)
    loss_button.grid(row=0, column=1, padx=10, pady=10)
    rating_button.grid(row=1, column=0, padx=10, pady=10)
    email_button.grid(row=1, column=1, padx=10, pady=10)
    logout_button.grid(row=2, columnspan=2, padx=10, pady=10)

    # Start the main GUI loop
    main_win.mainloop()

# Create the login window
login_win = tk.Tk()
login_win.title("Login")

# Create labels and entry fields for username and password
username_label = tk.Label(login_win, text="Username:", font=("Arial", 14))
username_label.pack(pady=5)
username_entry = tk.Entry(login_win, font=("Arial", 14))
username_entry.pack(pady=5)

password_label = tk.Label(login_win, text="Password:", font=("Arial", 14))
password_label.pack(pady=5)
password_entry = tk.Entry(login_win, show="*", font=("Arial", 14))  # Use a password-style entry
password_entry.pack(pady=5)

# Create a login button
login_button = tk.Button(login_win, text="Login", command=main_window, padx=20, pady=10, bg="blue", fg="white", font=("Arial", 14, "bold"))
login_button.pack(pady=10)

# Start the login GUI loop
login_win.mainloop()

import pandas as pd

# Load your dataset
# Replace 'modified_project_dataset.csv' with the actual file path of your dataset
data = pd.read_csv('modified_project_dataset.csv')

# Assuming 'visit_date' is the column where you want to remove rows with "###"
if 'visit_date' in data.columns:
    # Create a filter condition to exclude rows containing "###"
    filter_condition = ~data['visit_date'].str.contains("###")

    # Apply the filter to your dataset
    filtered_data = data[filter_condition]

    # Now 'filtered_data' contains rows without "###" in the 'visit_date' column
    print(filtered_data)
else:
    print("The 'visit_date' column does not exist in the dataset.")

import pandas as pd

# Load your dataset (modify the filename as needed)
data = pd.read_csv('updated_dataset_with_loss.csv')

# Access the 'feedback_rating' column
feedback_ratings = data['feedback_rating']

# Display unique values in the 'feedback_rating' column
unique_feedback_ratings = feedback_ratings.unique()

# Print the unique feedback ratings
for rating in unique_feedback_ratings:
    print(rating)

import pandas as pd

# Load your dataset (modify the filename as needed)
data = pd.read_csv('updated_dataset_with_loss.csv')

# Access the 'feedback_rating' column
feedback_ratings = data['feedback_rating']

# Display unique values in the 'feedback_rating' column and print a message with each rating
unique_feedback_ratings = feedback_ratings.unique()

for rating in unique_feedback_ratings:
    print(f"Feedback Rating: {rating}")